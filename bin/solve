#! /usr/bin/env node

const curves = require('../curves.json');
const fragments = require('../fragments.json');
const results = require('../results.json');

const xDivisor = 14;
const yDivisor = 12;

function calculateControls(p0, t1, t2, p3) {
  const p1x = Math.round((-5*p0[0] + 18*t1[0] - 9*t2[0] + 2*p3[0])/6);
  const p1y = Math.round((-5*p0[1] + 18*t1[1] - 9*t2[1] + 2*p3[1])/6);
  const p2x = Math.round((2*p0[0] - 9*t1[0] + 18*t2[0] - 5*p3[0])/6);
  const p2y = Math.round((2*p0[1] - 9*t1[1] + 18*t2[1] - 5*p3[1])/6);

  return [[p1x, p1y], [p2x, p2y]];
}

function sumCurves(name) {
  const points = curves[name];
  const fragment = fragments[name];

  let sum = [0, 0];

  let lastEnd = points[0];

  for (let i = 1; i < points.length; i++) {
    const point = points[i];

    const p0 = lastEnd;
    const { t1, t2 } = fragment[i-1];
    const p3 = lastEnd = point;

    const [ p1, p2 ] = calculateControls(p0, t1, t2, p3);

    sum[0] += p0[0] + p1[0] + p2[0] + p3[0];
    sum[1] += p0[1] + p1[1] + p2[1] + p3[1];
  }

  return sum;
}

Object.keys(curves).forEach((name) => {
  const finalSum = sumCurves(name);
  const { sum, coords } = results[name];

  const matchedSum = finalSum[0] === sum[0] && finalSum[1] === sum[1];

  if (!matchedSum) {
    console.assert(
      matchedSum,
      name + ' sum returned [' + finalSum[0] + ',' + finalSum[1] + '], but expected [' + sum[0] + ',' + sum[1] + ']'
    );
    return;
  }

  const finalCoords = [
    finalSum[0] % xDivisor,
    finalSum[1] % yDivisor,
  ];

  const matchedCoords = finalCoords[0] === coords[0] && finalCoords[1] === coords[1];

  if (!matchedCoords) {
    console.assert(
      matchedCoords,
      name + ' remainder returned [' + finalCoords[0] + ',' + finalCoords[1] + '], but expected [' + coords[0] + ',' + coords[1] + ']'
    );
    return;
  }

  console.log(name + ' evaluated correctly');
});